// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson34e1ec98DecodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes(in *jlexer.Lexer, out *PutMetricDataInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Namespace":
			out.Namespace = string(in.String())
		case "MetricData":
			if in.IsNull() {
				in.Skip()
				out.MetricData = nil
			} else {
				in.Delim('[')
				if out.MetricData == nil {
					if !in.IsDelim(']') {
						out.MetricData = make([]MetricDatum, 0, 0)
					} else {
						out.MetricData = []MetricDatum{}
					}
				} else {
					out.MetricData = (out.MetricData)[:0]
				}
				for !in.IsDelim(']') {
					var v1 MetricDatum
					easyjson34e1ec98DecodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes1(in, &v1)
					out.MetricData = append(out.MetricData, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson34e1ec98EncodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes(out *jwriter.Writer, in PutMetricDataInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Namespace\":"
		out.RawString(prefix[1:])
		out.String(string(in.Namespace))
	}
	{
		const prefix string = ",\"MetricData\":"
		out.RawString(prefix)
		if in.MetricData == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.MetricData {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson34e1ec98EncodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes1(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PutMetricDataInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson34e1ec98EncodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PutMetricDataInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson34e1ec98EncodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PutMetricDataInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson34e1ec98DecodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PutMetricDataInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson34e1ec98DecodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes(l, v)
}
func easyjson34e1ec98DecodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes1(in *jlexer.Lexer, out *MetricDatum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MetricName":
			out.MetricName = string(in.String())
		case "Timestamp":
			out.Timestamp = int64(in.Int64())
		case "Unit":
			out.Unit = string(in.String())
		case "Value":
			out.Value = float64(in.Float64())
		case "Dimensions":
			if in.IsNull() {
				in.Skip()
				out.Dimensions = nil
			} else {
				in.Delim('[')
				if out.Dimensions == nil {
					if !in.IsDelim(']') {
						out.Dimensions = make([]Dimension, 0, 2)
					} else {
						out.Dimensions = []Dimension{}
					}
				} else {
					out.Dimensions = (out.Dimensions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Dimension
					easyjson34e1ec98DecodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes2(in, &v4)
					out.Dimensions = append(out.Dimensions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson34e1ec98EncodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes1(out *jwriter.Writer, in MetricDatum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MetricName\":"
		out.RawString(prefix[1:])
		out.String(string(in.MetricName))
	}
	{
		const prefix string = ",\"Timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"Unit\":"
		out.RawString(prefix)
		out.String(string(in.Unit))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"Dimensions\":"
		out.RawString(prefix)
		if in.Dimensions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Dimensions {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson34e1ec98EncodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes2(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson34e1ec98DecodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes2(in *jlexer.Lexer, out *Dimension) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Name":
			out.Name = string(in.String())
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson34e1ec98EncodeGithubComHatappiAwsCloudwatchProxyWasmAwsTypes2(out *jwriter.Writer, in Dimension) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
